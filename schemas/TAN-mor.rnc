default namespace local = "tag:textalign.net,2015:ns"

include "incl/TAN-class-3.rnc" {
   start =
      
      ## specifies that the TAN file contains codes and rules for the parts of speech for a language, the codes for those parts, and the rules for combining them. Root element.
      element TAN-mor { TAN-root }
   decl-non-class-3 = element-for-lang+
   voc-element-non-class-3 = voc-element-feature*
   body-content-non-class-3 = TAN-mor-body
   action-condition-attributes =
      cond-attr-m-matches?,
      cond-attr-tok-matches?,
      cond-attr-m-has-codes?,
      cond-attr-m-has-how-many-codes?
}
# ATTRIBUTES
cond-attr-m-matches =
   
   ## takes a regular expression. The condition is true only if an <m> matches the pattern. 
   
   ## This is one of four tests for determining whether to process a <report> or <assert> 
   attribute m-matches { text }
cond-attr-tok-matches =
   
   ## takes a regular expression. When validating a given <m>, a test will be made against each companion <tok> (i.e., those <tok>s that have the same ancestral <ana>). The condition will be treated as true only for those matches with the resolved token value. 
   
   ## This is one of four tests for determining whether to process a <report> or <assert>
   attribute tok-matches { text }
cond-attr-m-has-codes =
   
   ## specifies one or more features. Values must be separated by spaces or the padded + (a plus sign with surrounding spaces). A plain space is treated  as meaning "or" and the padded + as meaning "and." If there is at least one match between the list and the value of the codes in an <m> then the condition will be treated as true. The padded plus sign specifies that all the items need to be found in the <m>. 
   
   ## For example, feature-test="A B + C D + E" means that the condition will be true for a given <m> only if that <m> has A or (B and C) or (D and E) present as values. This is one of four tests for determining whether to process a <report> or <assert>
   attribute m-has-codes {
      xsd:string { pattern = "[^\s\+]+(\s(\+\s)?[^\s\+]+)*" }
   }
cond-attr-m-has-how-many-codes =
   
   ## specifies a range or sequence of integers (e.g., 2-4). If the quantity of features in an <m> matches a number from that sequence, the condition is true, and false otherwise. If the keyword 'last' or 'max' is used, the total number of features will be substituted. 
   
   ## This test is useful for non-category based grammars to put a limit on the number of features that can be declared in an <m>. This is one of four tests for determining whether to process a <report> or <assert>
   attribute m-has-how-many-codes { data-picker-sequence }
ptr-attr-feature = attribute feature { text }
# ELEMENTS
element-assert =
   
   ## names a pattern that, if found to be false in any <m> in a dependent TAN-A-lm file, will return the enclosed message upon validation of the dependent file, along with an error or warning. Modeled on Schematron <report>.
   
   ## The sequence of consecutive <assert>s is immaterial.
   element assert { condition-pattern }
element-category =
   
   ## groups a set of features that share a common grammatical trait such as gender, number, etc.
   ## The order of consecutive <category>s is important, dictating the sequence in which codes should appear in the values of <m> in a dependent TAN-A-lm file.
   element category {
      ed-stamp?,
      (inclusion
       | (ptr-attr-feature?, (element-comment* & element-code+)))
   }
element-code =
   
   ## attaches a grammatical feature to a code, and makes it available to a TAN-A-lm file. 
   
   ## Because vocabulary item for a grammatical feature is language-agnostic, and because a TAN-mor code is language-specific, guidance to the editor of a TAN-A-lm file may be important. Ihildren <desc>s can be used to provide examples or other guidance.
   element code {
      ed-stamp?,
      (inclusion
       | (ptr-attr-feature, (element-desc* & element-val)))
   }
element-report =
   
   ## names a pattern that, if found to be true in any <m> in a dependent TAN-A-lm file, will return the enclosed message upon validation of the dependent file, along with an error or warning. Modeled on Schematron <report>.
   
   ## The sequence of consecutive <report>s is immaterial.
   element report { condition-pattern }
element-rule =
   
   ## encloses asserts and reports that should be evaluated provided that the conditions specified in the attributes (or children <where> attributes) are true.
   
   ## The sequence of consecutive <rule>s is immaterial.
   element rule {
      ed-stamp?,
      (inclusion
       | (action-condition, (element-assert | element-report)+))
   }
element-val =
   
   ## contains the expected value for a morphological code
   element val {
      
      ## The hyphen is reserved for "not applicable"; spaces and (),| reserved for @feature-test expressions
      xsd:string { pattern = "[^\-\+\s]|[^\+\s]+" }
   }
voc-element-feature =
   
   ## names, through its IRI + name pattern, a grammatical feature or concept (e.g., plural, subjunctive, 1st person) that is part of a language. In the context of <category> a @code is always included. The first <feature> of a <category>, however, never has a @code, because it describes the grammatical class of the <category>.
   
   ## The sequence of consecutive <feature>s is immaterial.
   
   ## See main.xml#vocabularies-features for a list of standard features.
   element feature { entity-nondigital-id }
# PATTERNS
condition-pattern = attr-flags-for-errors?, action-condition-attributes, text
TAN-mor-body = (features-categorized | features-uncategorized) & element-rule*
features-categorized = element-category+
features-uncategorized = element-code+
